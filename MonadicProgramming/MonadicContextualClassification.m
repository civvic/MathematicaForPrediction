(*
    Monadic contextual classification Mathematica package
    Copyright (C) 2017  Anton Antonov

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

    Written by Anton Antonov,
    antononcube @ gmail.com,
    Windermere, Florida, USA.
*)

(*
    Mathematica is (C) Copyright 1988-2017 Wolfram Research, Inc.

    Protected by copyright law and international treaties.

    Unauthorized reproduction or distribution subject to severe civil
    and criminal penalties.

    Mathematica is a registered trademark of Wolfram Research, Inc.
*)

(* :Title: MonadicContextualClassification *)
(* :Context: MonadicContextualClassification` *)
(* :Author: Anton Antonov *)
(* :Date: 2017-06-05 *)

(* :Package Version: 0.5 *)
(* :Mathematica Version: *)
(* :Copyright: (c) 2017 Anton Antonov *)
(* :Keywords: *)
(* :Discussion:


    ## Introduction

    This package provides functions for classification with classifiers with contexts.
    That is achieved by extending the functions of a State monad generated by the package
    "StateMonadCodeGenerator.m", [1], with functions specific to classification work flow.
    See [2] for explanations on monad code generation and extension.

    Here is an example of a pipeline created with the functions in the package:

       res =
         ClCon[ds, <||>] ⟹
           ClConSplitData[0.75] ⟹
           ClConMakeClassifier["NearestNeighbors"] ⟹
           ClConEchoFunctionContext[ClassifierInformation[#["classifier"]] &] ⟹
           ClConClassifierMeasurements[{"Accuracy", "Precision", "Recall"}] ⟹
           ClConEchoValue ⟹
           (If[#1["Accuracy"] > 0.7, None, ClCon[#1, #2]] &) ⟹
           ClConMakeClassifier["RandomForest"] ⟹
           ClConEchoFunctionContext[ClassifierInformation[#["classifier"]] &] ⟹
           ClConClassifierMeasurements[{"Accuracy", "Precision", "Recall"}] ⟹
           ClConEchoValue;


    ## Contexts

    The classifier contexts are Association objects. The pipeline values can have the form:

        ClCon[ val, context:(_String|_Association) ]

    see the explanations in [1] for more details.

    Some of the specific functions set or retrieve values from contexts for the keys:
    "trainingData", "testData", "classifier".


    ## Error messages

    The error messages are print-outs with `Echo`. They can be easily changed to use `Message` instead.
    (`Echo` is used since it fits the monadic pipeline "culture.")


    ## Examples

    ### Data

    Assume we have the Titanic data as our working dataset:

       dataName = "Titanic";
       ds = Dataset[Flatten@*List @@@ ExampleData[{"MachineLearning", dataName}, "Data"]];
       varNames = Flatten[List @@ ExampleData[{"MachineLearning", dataName}, "VariableDescriptions"]];
       ds = ds[All, AssociationThread[varNames -> #] &];

    ### Complete usage example

    TBD...


    ### Complete usage example with string contexts

    TBD...


    ## References

    [1] Anton Antonov, StateMonadCodeGenerator.m, 2017, MathematicaForPrediction at GitHub.
        URL: https://github.com/antononcube/MathematicaForPrediction/blob/master/MonadicProgramming/StateMonadCodeGenerator.m

    [2] Anton Antonov, "Monad code generation and extension", 2017, MathematicaForPrediction at GitHub.
        URL: https://github.com/antononcube/MathematicaForPrediction/blob/master/MarkdownDocuments/Monad-code-generation-and-extension.md

    ## End matters

    This file was created by Mathematica Plugin for IntelliJ IDEA.

    Anton Antonov
    Windermere, FL, USA
    2017-06-05

*)

(*
    TODO:
     1. Add examples explained in detail.
     2. CANCELED Make a true package.
     3. DONE Add classifier ensemble handling.
     4. Give examples of tracking symbols.
*)

(*BeginPackage["MonadicContextualClassification`"]*)

(*ClConSplitData::usage = "ClConSplitData[fr_?NumberQ]";*)

(*ClConRecoverData::usage = "ClConRecoverData";*)

(*ClConMakeClassifier::usage = "ClConMakeClassifier[methodSpec_?MethodSpecQ]";*)

(*ClConClassifierMeasurements::usage = "ClConClassifierMeasurements[measures : (_String | {_String ..})]";*)

(*ClConAccuracyByVariableShuffling::usage = "ClConAccuracyByVariableShuffling[opts : OptionsPattern[]]";*)

(*ClConTakeData::usage = "ClConTakeData";*)

(*ClConTakeVariableNames::usage = "ClConTakeVariableNames";*)

(*ClConTakeClassifier::usage = "ClConTakeClassifier";*)

(*ClConSummarizeData::usage = "ClConSummarizeData";*)

(*ClConSummarizeDataLongForm::usage = "ClConSummarizeDataLongForm";*)

(*Begin["`Private`"]*)


If[Length[DownValues[MathematicaForPredictionUtilities`RecordsSummary]] == 0,
  Echo["MathematicaForPredictionUtilities.m", "Importing from GitHub:"];
  Import["https://raw.githubusercontent.com/antononcube/MathematicaForPrediction/master/MathematicaForPredictionUtilities.m"]
];

If[Length[DownValues[OutlierIdentifiers`HampelIdentifierParameters]] == 0,
  Echo["OutlierIdentifiers.m", "Importing from GitHub:"];
  Import["https://raw.githubusercontent.com/antononcube/MathematicaForPrediction/master/OutlierIdentifiers.m"]
];

If[Length[DownValues[StateMonadCodeGenerator`GenerateStateMonadCode]] == 0,
  Echo["StateMonadCodeGenerator.m", "Importing from GitHub:"];
  Import["https://raw.githubusercontent.com/antononcube/MathematicaForPrediction/master/MonadicProgramming/StateMonadCodeGenerator.m"]
];

If[Length[DownValues[ClassifierEnsembles`EnsembleClassifierMeasurements]] == 0,
  Echo["ClassifierEnsembles.m", "Importing from GitHub:"];
  Import["https://raw.githubusercontent.com/antononcube/MathematicaForPrediction/master/ClassifierEnsembles.m"]
];

If[Length[DownValues[VariableImportanceByClassifiers`AccuracyByVariableShuffling]] == 0,
  Echo["VariableImportanceByClassifiers.m", "Importing from GitHub:"];
  Import["https://raw.githubusercontent.com/antononcube/MathematicaForPrediction/master/VariableImportanceByClassifiers.m"]
];

If[Length[DownValues[CrossTabulate`CrossTabulate]] == 0,
  Echo["CrossTabulate.m", "Importing from GitHub:"];
  Import["https://raw.githubusercontent.com/antononcube/MathematicaForPrediction/master/CrossTabulate.m"]
];

If[Length[DownValues[Global`RSparseMatrixToTriplets]] == 0,
  Echo["RSparseMatrix.m", "Importing from GitHub:"];
  Import["https://raw.githubusercontent.com/antononcube/MathematicaForPrediction/master/Misc/RSparseMatrix.m"]
];


(*Needs["StateMonadCodeGenerator`"]*)
(*Needs["VariableImportanceByClassifiers`"]*)

(* The definitions are made to have a prefix "ClCon" . *)

(**************************************************************)
(* Generation                                                 *)
(**************************************************************)

(* Generate base functions of ClCon monad (ClassifierWithContext) *)

GenerateStateMonadCode["ClCon","FailureSymbol" -> $ClConFailure]

(**************************************************************)
(* Infix operators                                            *)
(**************************************************************)

(* This should be already done by GenerateStateMonadCode. *)
(*DoubleLongRightArrow[x_?ClConUnitQ, f_] := ClConBind[x, f];*)

(**************************************************************)
(* General functions                                          *)
(**************************************************************)

ClearAll[ClConToNormalClassifierData]

Options[ClConToNormalClassifierData] = {"DeleteMissing"->True, "ClassLabelColumn" -> Automatic };

(* Here we use MathematicaForPredictionUtilities`DataRulesForClassifyQ *)

ClConToNormalClassifierData[ {}, opts:OptionsPattern[] ] := {};

ClConToNormalClassifierData[ data_?DataRulesForClassifyQ, opts:OptionsPattern[] ] :=
    Block[{},
      If[ TrueQ[ OptionValue[ClConToNormalClassifierData,"DeleteMissing"]],
        DeleteMissing[data,1,2],
        data
      ]
    ];

ClConToNormalClassifierData[ data_Association, opts:OptionsPattern[] ] :=
    Block[{},
      If[ TrueQ[ OptionValue[ClConToNormalClassifierData,"DeleteMissing"]],
        DeleteMissing[data,2,2],
        data
      ]
    ] /; MatchQ[ data, Association[(_?AtomQ -> _List) ..]];

ClConToNormalClassifierData[ td_Dataset, opts:OptionsPattern[] ] :=
    ClConToNormalClassifierData[ Normal[td[All, Values]], opts];

ClConToNormalClassifierData[ data_?ArrayQ, opts:OptionsPattern[] ] :=
    Block[{dmVal, labelCol, trainingRange, ncols},

      ncols = Dimensions[data][[2]];

      dmVal = TrueQ[ OptionValue[ClConToNormalClassifierData,"DeleteMissing"]];

      labelCol = OptionValue[ClConToNormalClassifierData,"ClassLabelColumn"];
      If[ TrueQ[labelCol === Automatic], labelCol = ncols ];

      trainingRange = Complement[Range[ncols], {labelCol}];

      If[ dmVal,
        Thread[#[[All, trainingRange]] -> #[[All, labelCol]]] &@ DeleteMissing[data, 1, 2],
      (* ELSE *)
        Thread[#[[All, trainingRange]] -> #[[All, labelCol]]] &@ data
      ]
    ];


(**************************************************************)
(* Monad specific functions                                   *)
(**************************************************************)

(* This function does not respect specified label column yet. *)
Options[ClConSplitData] = {Method->"LabelsProportional", "ClassLabelColumn" -> Automatic};

ClConSplitData[_][$ClConFailure] := $ClConFailure
ClConSplitData[fr_?NumberQ, opts:OptionsPattern[]][xs_, context_Association] :=
    Block[{method=OptionValue[ClConSplitData, Method], labelCol, dataLabels, indGroups, t, trainingData, testData},

      labelCol = OptionValue[ClConSplitData,"ClassLabelColumn"];

      Which[
        method == "LabelsProportional",
        dataLabels =
            Transpose[{Range[Length[xs]], Normal[xs[[All, -1]]]}];
        indGroups = Map[#[[All, 1]] &, GroupBy[dataLabels, Last]];

        t = TakeDrop[RandomSample[#], Ceiling[fr*Length[#]]] & /@ indGroups;

        trainingData = xs[[ Join @@ t[[All, 1]], All]];
        testData =  xs[[ Join @@ t[[All, 2]], All]],

        True,
        {trainingData, testData} = TakeDrop[RandomSample[xs], Floor[fr*Length[xs]]];
      ];

      ClCon[AssociationThread[{"trainingData", "testData"} -> {trainingData, testData}], context]
    ] /; 0 < fr <= 1;


ClConRecoverData[$ClConFailure] := $ClConFailure;
ClConRecoverData[xs_, context_Association] :=
    Block[{},
      Which[
        MatchQ[xs, _Association] && KeyExistsQ[xs, "trainingData"] && KeyExistsQ[xs, "testData"],
        ClCon[Join[xs["trainingData"], xs["testData"]], context],

        KeyExistsQ[context, "trainingData"] && KeyExistsQ[context, "testData"],
        ClCon[Join[context["trainingData"], context["testData"]], context],

        True,
        Echo["Cannot recover data.","ClConRecoverData:"];
        $ClConFailure
      ]
    ];


ClConSetTrainingData[$ClConFailure] := $ClConFailure;
ClConSetTrainingData[data_][xs_, context_Association] :=
    ClConUnit[xs, Join[ context, <| "trainingData" -> data |> ] ];


ClConSetTestData[$ClConFailure] := $ClConFailure;
ClConSetTestData[data_][xs_, context_Association] :=
    ClConUnit[xs, Join[ context, <| "testData" -> data |> ] ];


ClConSetValidationData[$ClConFailure] := $ClConFailure;
ClConSetValidationData[data_][xs_, context_Association] :=
    ClConUnit[xs, Join[ context, <| "validationData" -> data |> ] ];


ClConSetClassifier[$ClConFailure] := $ClConFailure;
ClConSetClassifier[cl_][xs_, context_Association] :=
    ClConUnit[xs, Join[ context, <| "classifier" -> cl |> ] ];


ClConTakeData[$ClConFailure] := $ClConFailure;
ClConTakeData[xs_, context_] :=
    Fold[ ClConBind, ClConUnit[xs, context], {ClConRecoverData, ClConTakeValue}];


ClConTakeClassifier[$ClConFailure] := $ClConFailure;
ClConTakeClassifier[xs_, context_Association] := context["classifier"];


ClConTakeClassLabelIndex[___][$ClConFailure] := $ClConFailure;
ClConTakeClassLabelIndex[][xs_, context_Association] := ClConTakeClassLabelIndex[Automatic][xs, context];
ClConTakeClassLabelIndex[classLabel_][xs_, context_Association] :=
    Block[{varNames},

      varNames = ClConBind[ ClConUnit[xs, context], ClConTakeVariableNames ];

      Which[

        TrueQ[classLabel===Automatic] && KeyExistsQ[context, "classLabel"] && MemberQ[varNames, context["classLabel"]],
        <| context["classLabel"] -> First@Flatten@Position[varNames, context["classLabel"]] |>,

        TrueQ[classLabel===Automatic] && KeyExistsQ[context, "classLabel"] && !MemberQ[varNames, context["classLabel"]],
        Echo["The context value for \"classLabel\" is one of " <> ToString[varNames], "ClConTakeClassLabelIndex::"];
        $ClConFailure,

        TrueQ[classLabel===Automatic],
        <| varNames[[-1]] -> Length[varNames] |>,

        MemberQ[varNames, classLabel],
        <| classLabel -> First@Flatten@Position[varNames, classLabel] |>,

        True,
        Echo["The specified class label "<>ToString[classLabel]<>" is one of " <> ToString[varNames], "ClConTakeClassLabelIndex::"];
        $ClConFailure
      ]
    ];


ClConTakeVariableNames[$ClConFailure] := $ClConFailure;
ClConTakeVariableNames[xs_, context_Association] :=
    Fold[ClConBind, ClConUnit[xs, context], {ClConGetVariableNames, ClConTakeValue}];


ClConGetVariableNames[$ClConFailure] := $ClConFailure;
ClConGetVariableNames[xs_, context_Association] :=
    Block[{},
      Which[
        TrueQ[Head[xs] === Dataset],
        ClCon[Normal[xs[1,Keys]], context],

        MatchQ[xs, _Association] && KeyExistsQ[xs, "trainingData"] && TrueQ[Head[xs["trainingData"]] == Dataset],
        ClCon[Normal[xs["trainingData"][1,Keys]], context],

        KeyExistsQ[context, "trainingData"] && KeyExistsQ[context, "testData"] && TrueQ[Head[context["trainingData"]] == Dataset],
        ClCon[Normal[context["trainingData"][1,Keys]], context],

        KeyExistsQ[context, "variableNames"],
        ClCon[context["variableNames"], context],

        True,
        Echo["Cannot find the variable names: (1) there is no context key \"variableNames\", (2) the pipeline value is not a Dataset, and (3) there is no \"trainingData\" key in the context or the corresponding value is not a Dataset.",
             "ClConGetVariableNames:"];
        $ClConFailure
      ]
    ];


ClConEchoVariableNames[$ClConFailure] := $ClConFailure;
ClConEchoVariableNames[xs_, context_Association] :=
    Block[{t},
      t = Fold[ ClConBind, ClConUnit[xs,context], {ClConGetVariableNames, ClConTakeValue}];
      Echo[t,"variable names:"];
      ClConUnit[xs, context]
    ];


(************************************************************)
(* ClConSummarizeData                                       *)
(************************************************************)

Options[ClConSummarizeData] = {"Type" -> Automatic};

ClConSummarizeData[___][$ClConFailure] := $ClConFailure;

ClConSummarizeData[opts:OptionsPattern[]][xs_, context_] :=
    ClConSummarizeDataLongForm[DeleteCases[{opts},"Type"->_]][xs, context];

Options[ClConSummarizeDataLongForm] = Options[MathematicaForPredictionUtilities`DataColumnsSummary];

ClConSummarizeDataLongForm[___][$ClConFailure] := $ClConFailure;

ClConSummarizeDataLongForm[opts:OptionsPattern[]][xs_, context_] :=
    Block[{varNames, ctData, data, sMat, dataLongForm, res},

      Which[
        Head[xs] === Dataset || DataRulesForClassifyQ[xs],
        ctData = <|Anonymous->xs|>,

        MatchQ[xs, _Association] && KeyExistsQ[xs, "trainingData"] && KeyExistsQ[xs, "testData"],
        ctData = xs,

        True,
        ctData = KeyTake[context, {"trainingData", "testData", "validationData"}]
      ];

      If[ And @@ Map[ Length[#]==0 &, ctData],
        Echo["Cannot find data in the context.", "ClConSummarizeDataLongForm:"];
        $ClConFailure
      ];

      varNames = ClConBind[ ClConUnit[xs,context], ClConTakeVariableNames ];
      If[ TrueQ[varNames === $ClConFailure], varNames = ToString/@Range[Dimensions[ctData][[2]]] ];

      ctData = ClConToNormalClassifierData /@ ctData;

      res =
          Function[{data},
            If[Length[data] == 0, {},

              sMat = ToRSparseMatrix[SparseArray@(Flatten@*List @@@ data),
                "ColumnNames" -> varNames,
                "RowNames" -> ToString /@ Range[Length[data]]];

              dataLongForm = RSparseMatrixToTriplets[sMat];
              RecordsSummary[dataLongForm, {"RowID", "Variable", "Value"}, opts]
            ]
          ] /@ ctData;

      ClConUnit[ Normal@res, context]
    ];



(************************************************************)
(* ClConMakeClassifier                                      *)
(************************************************************)

ClConMethodQ[x_] := StringQ[x]; (* And check is it known by Classify. *)

ClConMethodListQ[x_] := MatchQ[ x, {_?ClConMethodQ..} ];

ClConResamplingMethodQ[x_] := MatchQ[ x, (Automatic | _Association | _String | {_String, _?NumberQ} | {_String, _?NumberQ, _Integer} | {_String, _?NumberQ, _Integer, RandomSample | RandomChoice}) ];

(* Note that is includes MethodListQ. *)
ClConResamplingMethodListQ[x_] := MatchQ[ x, { _?ClConResamplingMethodQ .. } ];

ClConMethodSpecQ[x_] := ClConMethodQ[x] || ClConResamplingMethodQ[x] || ClConResamplingMethodListQ[x];

ClConClassifierQ[ cl_ ] :=
    MatchQ[ cl, _ClassifierFunction] ||
        If[Length[DownValues[ClassifierEnsembles`EnsembleClassifierMeasurements]] > 0,
          MatchQ[ cl, Association[(_ -> _ClassifierFunction) ..] ]
        ];

Options[ClConMakeClassifier] = Options[Classify];

ClConMakeClassifier[___][$ClConFailure] := $ClConFailure;

ClConMakeClassifier[][xs_, context_] := ClConMakeClassifier["LogisticRegression"][xs, context];

ClConMakeClassifier[methodSpecArg_?ClConMethodSpecQ, opts:OptionsPattern[]][xs_, context_] :=
    Block[{cf, dataAssoc, newContext, methodSpec = methodSpecArg},

      Which[
        MatchQ[xs, _Association] && KeyExistsQ[xs, "trainingData"] && KeyExistsQ[xs, "testData"],
        dataAssoc = xs; newContext = Join[context, xs],

        KeyExistsQ[context, "trainingData"] && KeyExistsQ[context, "testData"],
        dataAssoc = context; newContext = <||>,

        True,
        Echo["Split the data first. (No changes in argument and context were made.)", "ClConMakeClassifier:"];
        Return[ClCon[xs, context]]
      ];

      (* Note that if opts has Method->_ then this setting is ignored. *)
      If[ TrueQ[methodSpec===Automatic], methodSpec = "LogisticRegression" ];

      Which[
        ClConMethodQ[methodSpec] && ( !KeyExistsQ[context, "validationData"] || TrueQ[dataAssoc["validationData"] === Automatic] ),
        cf = Classify[ClConToNormalClassifierData[dataAssoc@"trainingData"], opts, Method -> methodSpec ],

        ClConMethodQ[methodSpec] && KeyExistsQ[context, "validationData"],
        cf = Classify[ClConToNormalClassifierData[dataAssoc@"trainingData"], opts, Method -> methodSpec,
                      ValidationSet -> ClConToNormalClassifierData[dataAssoc@"validationData"] ],

        ClConMethodListQ[methodSpec],
        cf = EnsembleClassifier[ methodSpec, ClConToNormalClassifierData[dataAssoc@"trainingData"], opts ],

        ClConResamplingMethodQ[methodSpec],
        cf = ResamplingEnsembleClassifier[ {methodSpec}, ClConToNormalClassifierData[dataAssoc@"trainingData"], opts ],

        ClConResamplingMethodListQ[methodSpec],
        cf = ResamplingEnsembleClassifier[ methodSpec, ClConToNormalClassifierData[dataAssoc@"trainingData"], opts ],

        True,
        Echo["Unknown classifier specification.", "ClConMakeClassifier:"];
        cf = None;
      ];

      If[ ! ClConClassifierQ[cf],
        Echo["Classifier making failure.", "ClConMakeClassifier:"];
        $ClConFailure,
      (* ELSE *)
        ClCon[cf, Join[context, newContext, <|"classifier" -> cf|>]]
      ]
    ];


(************************************************************)
(* ClConClassifierMeasurements                              *)
(************************************************************)

Options[ClConClassifierMeasurements] = { Method -> Automatic, "ROCRange" -> Range[0,1,0.025]};

ClConClassifierMeasurements[___][$ClConFailure] := $ClConFailure;

ClConClassifierMeasurements[measuresArg : (_String | {_String ..}), opts:OptionsPattern[]][xs_, context_] :=
    Block[{cm, measures = Flatten[{measuresArg}], cmROC, rocRange},

      rocRange = OptionValue[ ClConClassifierMeasurements, "ROCRange"];
      If[ !( VectorQ[rocRange,NumberQ] && Apply[And, 0 <= # <= 1& /@ rocRange] ),
        Echo["The value of the option \"ROCRange\" is expected to be a list of numbers between 0 and 1.", "ClConClassifierMeasurements:"];
        Echo["Continuing with \"ROCRange\"-> Range[0,1,0.025].", "ClConClassifierMeasurements:"];
        rocRange = Range[0,1,0.025];
      ];

      Which[

        !KeyExistsQ[context, "classifier"],
        Echo["Make a classifier first.", "ClConClassifierMeasurements:"];
        $ClConFailure,

        !( MatchQ[ context["classifier"], _ClassifierFunction] || MatchQ[ context["classifier"], Association[(_ -> _ClassifierFunction) ..] ] ),
        Echo["The value of \"classifier\" in the context is not a ClassifierFunction object or an Association of ClassifierFunction objects.", "ClConClassifierMeasurements:"];
        $ClConFailure,

        !KeyExistsQ[context, "testData"],
        Echo["Cannot find test data in the context.","ClConClassifierMeasurements:"];
        $ClConFailure,

        MatchQ[ context["classifier"], _ClassifierFunction],
        cm = ClassifierMeasurements[context["classifier"], ClConToNormalClassifierData[context@"testData"]];
        ClCon[AssociationThread[measures -> cm /@ measures], context],

        !MemberQ[measures, "ROCCurve"],
        cm = EnsembleClassifierMeasurements[ context["classifier"], ClConToNormalClassifierData[context@"testData"], measures, opts];
        ClCon[AssociationThread[measures -> cm], context],

        True,
        (* This here reconciles EnsembleClassifierMeasurements with ClassifierMeasurements.
           It is probably better to be handled in ClassifierEnsembles.m .
           The advantage of handling it here is that ClassifierEnsembles.m does not have to be changed. *)
        cmROC =
            EnsembleClassifierROCPlots[
              context["classifier"], ClConToNormalClassifierData @ context["testData"], rocRange,
              PlotJoined -> True, PlotRange -> {{0, 1}, {0, 1}},
              GridLines -> Automatic];
        measures = DeleteCases[measures, "ROCCurve"];
        cm = EnsembleClassifierMeasurements[ context["classifier"], ClConToNormalClassifierData[context@"testData"], measures, opts];
        ClCon[Join[AssociationThread[measures -> cm], <|"ROCCurve"->cmROC|>], context]

      ]
    ];

(************************************************************)
(* ClConROCData                                             *)
(************************************************************)
(* This is done as a separate function because it is important to be able to extract and manipulate that data. *)
(* Another reason is that there is no easy way of extracting that from the ClassifierMeasurements objects. *)
(* Here we extract that data as "black box" wise. *)
(* Note that there is an *Echo* version. This prompts as possible computation optimization. *)

Options[ClConROCData] = { "ROCRange" -> Range[0,1,0.025], "TargetClasses" -> All };

ClConROCData[___][$ClConFailure] = $ClConFailure;

(* (Of course) this implementation is very similar to ClConClassifierMeasurements. *)
(* So, some proper refactoring has to be done. *)
ClConROCData[opts:OptionsPattern[]][xs_,context_]:=
    Block[{ rocRange, targetClasses, cl},

      rocRange = OptionValue[ ClConROCData, "ROCRange"];
      If[ !( VectorQ[rocRange,NumberQ] && Apply[And, 0 <= # <= 1& /@ rocRange] ),
        Echo["The value of the option \"ROCRange\" is expected to be a list of numbers between 0 and 1.", "ClConROCData:"];
        Echo["Continuing with \"ROCRange\"-> Range[0,1,0.025].", "ClConROCData:"];
        rocRange = Range[0,1,0.025];
      ];

      targetClasses = OptionValue[ ClConROCData, "TargetClasses"];

      Which[

        !KeyExistsQ[context, "classifier"],
        Echo["Make a classifier first.", "ClConROCData:"];
        $ClConFailure,

        !( MatchQ[ context["classifier"], _ClassifierFunction] || MatchQ[ context["classifier"], Association[(_ -> _ClassifierFunction) ..] ] ),
        Echo["The value of \"classifier\" in the context is not a ClassifierFunction object or an Association of ClassifierFunction objects.", "ClConROCData:"];
        $ClConFailure,

        !KeyExistsQ[context, "testData"],
        Echo["Cannot find test data in the context.","ClConROCData:"];
        $ClConFailure,

        MatchQ[ context["classifier"], _ClassifierFunction],
        cl = <| ClassifierInformation[context["classifier"],Method] -> context["classifier"] |>,

        True,
        cl = context["classifier"]
      ];

      res = EnsembleClassifierROCData[ cl, ClConToNormalClassifierData[context["testData"]], rocRange, targetClasses];
      ClConUnit[ Association[res], context ]

    ];

(************************************************************)
(* ClConAccuracyByVariableShuffling                         *)
(************************************************************)

Options[ClConAccuracyByVariableShuffling] = { "Classes" -> None };

ClConAccuracyByVariableShuffling[___][$ClConFailure] := $ClConFailure;

ClConAccuracyByVariableShuffling[][xs_, context_] :=
    ClConAccuracyByVariableShuffling["Classes" -> None][xs, context];

ClConAccuracyByVariableShuffling[opts : OptionsPattern[]][xs_, context_] :=
    Block[{fsClasses = FilterRules[{opts}, "Classes"]},

      If[Length[fsClasses] == 0 || fsClasses === Automatic, fsClasses = None];

      Which[

        !KeyExistsQ[context, "testData"],
        Echo["No test data is the context.", "ClConAccuracyByVariableShuffling:"];
        $ClConFailure,

        !KeyExistsQ[context, "classifier"],
        Echo["No classifier in the context.", "ClConAccuracyByVariableShuffling:"];
        $ClConFailure,

        TrueQ[ Head[context["testData"]] === Dataset ],
        ClCon[
          AccuracyByVariableShuffling[
            context["classifier"],
            ClConToNormalClassifierData[context["testData"]],
            Most@Keys[Normal@context["testData"][[1]]],
            fsClasses],
          context],

        DataRulesForClassifyQ[context["testData"]],
        ClCon[
          AccuracyByVariableShuffling[
            context["classifier"],
            context["testData"],
            Automatic,
            fsClasses],
          context],

        True,
        Echo["Unknown data type of the test data is the context.", "ClConAccuracyByVariableShuffling:"];
        $ClConFailure

      ]
    ];


(************************************************************)
(* ClConToLinearVectorSpaceRepresentation                   *)
(************************************************************)

ClConToLinearVectorSpaceRepresentation[data:(_?MatrixQ|_Dataset)] :=
    Block[{catData, smats, resMat, res},

      catData = ToCategoricalColumns[data];

      smats =
          Table[
            CrossTabulate[ Transpose[{Range[Length[catData]], Normal[catData[All, i]]}] ],
            {i, Length[data[1]]}];

      resMat = Transpose[Join @@ Map[Transpose[#["XTABMatrix"]] &, smats]];

      <| "XTABMatrix"->resMat, "RowNames"-> smats[[1]]["RowNames"], "ColumnNames" -> Join @@ Through[smats["ColumnNames"]] |>
    ];

ClConToLinearVectorSpaceRepresentation[][$ClConFailure] := $ClConFailure;

ClConToLinearVectorSpaceRepresentation[][xs_, context_] :=
    Block[{t},
      t = ClConBind[ ClConUnit[xs, context], ClConTakeData ];

      If[ t === $ClConFailure, Return[$ClConFailure] ];

      t = ClConToLinearVectorSpaceRepresentation[t];

      ClConUnit[t, context]
    ];


(************************************************************)
(* ClConOutlierPosition                                     *)
(************************************************************)

Options[ClConOutlierPosition] = {
  "CentralItemFunction" -> Mean,
  DistanceFunction -> EuclideanDistance,
  "OutlierIdentifierParameters" -> (TopOutliers@*SPLUSQuartileIdentifierParameters),
  "ClassLabel" -> Automatic,
  "SimpleConversion" -> True
};

ClConOutlierPosition[ data:(_?MatrixQ|_Dataset), opts:OptionsPattern[] ] :=
    Block[{avgFunc, distFunc, olParams, simpleConversion, smat, avgItem, dists},

      avgFunc = OptionValue[ ClConOutlierPosition, "CentralItemFunction" ];
      distFunc = OptionValue[ ClConOutlierPosition, DistanceFunction ];
      olParams = OptionValue[ ClConOutlierPosition, "OutlierIdentifierParameters" ];
      simpleConversion = TrueQ[OptionValue[ ClConOutlierPosition, "SimpleConversion" ]];

      Which[
        TrueQ[Head[data]===Dataset] && MatrixQ[Normal[data[Values]], NumberQ],
        smat = Normal[data[Values]],

        simpleConversion,
        smat = Query[All, Values@*Select[NumberQ]]@ReplaceAll[Normal[data], _Missing -> 0];
        If[VectorQ[smat], smat = Transpose[{smat}] ],

        True,
        smat = ClConToLinearVectorSpaceRepresentation[data]["XTABMatrix"]
      ];

      avgItem = avgFunc[N@smat];

      dists = Map[distFunc[#, avgItem] &, Identity /@ smat];

      OutlierPosition[dists, olParams]
    ];

ClConOutlierPosition[___][$ClConFailure] := $ClConFailure;

ClConOutlierPosition[opts:OptionsPattern[]][xs_, context_] :=
    Block[{classLabel, classLabelInd},

      classLabel = OptionValue[ ClConOutlierPosition, "ClassLabel" ];

      classLabelInd = ClConBind[ ClConUnit[xs,context], ClConTakeClassLabelIndex[classLabel]];

      Which[
        MatchQ[xs, _Association] && KeyExistsQ[xs, "trainingData"] && KeyExistsQ[xs, "testData"],
        ClConUnit[
          <|"trainingData"->ClConOutlierPosition[xs["trainingData"][All, # & /* KeyDrop[Keys[classLabelInd]]], opts],
            "testData" -> ClConOutlierPosition[xs["testData"][All, # & /* KeyDrop[Keys[classLabelInd]]], opts] |>,
          context],

        KeyExistsQ[context, "trainingData"] && KeyExistsQ[context, "testData"],
        ClConUnit[
          <|"trainingData"->ClConOutlierPosition[context["trainingData"][All, # & /* KeyDrop[Keys[classLabelInd]]], opts],
            "testData" -> ClConOutlierPosition[context["testData"][All, # & /* KeyDrop[Keys[classLabelInd]]], opts] |>,
          context],

        TrueQ[Head[xs] === Dataset] || TrueQ[MatrixQ[xs]],
        ClConUnit[ClConOutlierPosition[xs, opts], context],

        True,
        Echo["Cannot find data.","ClConOutlierPosition:"];
        $ClConFailure
      ]

    ];

(************************************************************)
(* ClConFindOutliersPerClass                                *)
(************************************************************)

Options[ClConFindOutliersPerClass] = {
  "OutlierIdentifierParameters" -> (TopOutliers@*SPLUSQuartileIdentifierParameters),
  "TrainingDataOnly" -> True,
  "ClassLabel" -> Automatic,
  "SimpleConversion" -> True
};

ClConFindOutliersPerClass[___][$ClConFailure] := $ClConFailure;

ClConFindOutliersPerClass[][xs_, context_Association] :=
    ClConFindOutliersPerClass["OutlierIdentifierParameters" -> (TopOutliers@*SPLUSQuartileIdentifierParameters) ][xs, context];

ClConFindOutliersPerClass[opts : OptionsPattern[]][xs_, context_Association] :=
    Block[{data, res},

      res = Fold[ ClConBind, ClConUnit[xs,context], {ClConOutliersOperationsProcessing[opts][##]&, ClConTakeValue}];

      data = res["data"][ GroupBy[#[res["classLabel"]]&] ];

      res =
          AssociationThread[
            Normal[Keys[data]],
            Table[ClConOutlierPosition[data[i], "OutlierIdentifierParameters" -> res["outlierIdentifier"] ], {i, Length[data]}]
          ];

      ClConUnit[res, context]
    ];


(************************************************************)
(* ClConDropOutliersPerClass                                *)
(************************************************************)

(*
  This function drops the outliers for each class label in a Dataset object.
  Here are the steps.

  1. The Dataset object is split into parts corresponding to the unique values of the
  specified class label.

  2. For each part the outliers are found with the specified outlier identifier.

  3. The obtained parts are joined into a dataset.

  4. That dataset is returned as monad pipeline value.
*)

Options[ClConDropOutliersPerClass] = Options[ClConFindOutliersPerClass];

ClConDropOutliersPerClass[___][$ClConFailure] := $ClConFailure;

ClConDropOutliersPerClass[][xs_, context_Association] :=
    ClConDropOutliersPerClass["OutlierIdentifierParameters" -> (TopOutliers@*SPLUSQuartileIdentifierParameters) ][xs, context];

ClConDropOutliersPerClass[opts : OptionsPattern[]][xs_, context_Association] :=
    Block[{data, res, t},

      res = Fold[ ClConBind, ClConUnit[xs,context], {ClConOutliersOperationsProcessing[opts][##]&, ClConTakeValue}];

      data = res["data"][ GroupBy[#[res["classLabel"]]&] ];

      res =
          Table[(
            t = ClConOutlierPosition[ data[i], "OutlierIdentifierParameters" -> res["outlierIdentifier"], "SimpleConversion" -> res["simpleConversion"] ];
            data[i][ Complement[ Range[Length[data[i]]], t] ]
          ), {i, Length[data]}];

      res = Join @@ res;

      ClConUnit[res, context]
    ];


(************************************************************)
(* ClConOutliersOperationsProcessing                        *)
(************************************************************)

Options[ClConOutliersOperationsProcessing] = Options[ClConFindOutliersPerClass];

ClConOutliersOperationsProcessing[___][$ClConFailure] := $ClConFailure;

ClConOutliersOperationsProcessing[opts : OptionsPattern[]][xs_, context_Association] :=
    Block[{data, outlierIdentifier, trainingDataOnly, simpleConversion, classLabel, classLabelInd, varNames, res},

      outlierIdentifier = OptionValue[ ClConOutliersOperationsProcessing, "OutlierIdentifierParameters"];
      trainingDataOnly = TrueQ[ OptionValue[ ClConOutliersOperationsProcessing, "TrainingDataOnly" ] ];
      classLabel = OptionValue[ ClConOutliersOperationsProcessing, "ClassLabel" ];
      simpleConversion = TrueQ[ OptionValue[ClConOutliersOperationsProcessing, "SimpleConversion" ] ];

      If[ trainingDataOnly,

        Which[

          AssociationQ[xs] && KeyExistsQ[xs, "trainingData"],
          data = xs["trainingData"],

          KeyExistsQ[context, "trainingData"],
          data = context["trainingData"],

          True,
          Echo["No training data.", "ClConFindOutliersPerClass::"];
          $ClConFailure

        ],

        (* ELSE *)
        data = ClConTakeData[xs, context]
      ];

      If[ TrueQ[Head[data] =!= Dataset],
        Print[data];
        Echo[ "The obtained data a Dataset object.", "ClConFindOutliersPerClass::"];
        Return[$ClConFailure]
      ];

      (* It is assumed below that data is a Dataset. *)

      varNames = ClConBind[ ClConUnit[xs,context], ClConTakeVariableNames ];

      Which[

        TrueQ[classLabel === Automatic],
        classLabel = varNames[[-1]];
        classLabelInd = Length[varNames],

        IntegerQ[classLabel],
        classLabelInd = classLabel;
        If[ !(1 <= classLabelInd <= Length[varNames]),
          Echo[ "The \"ClassLabel\" option value " <> classLabel <> " is not an integer between 1 and " <> ToString[Length[varNames]] <>".", "ClConOutliersOperationsProcessing::"];
          Return[$ClConFailure]
        ];
        classLabel = varNames[[classLabelInd]],

        MemberQ[ varNames, classLabel ],
        classLabelInd = First@Flatten@Position[varNames, classLabel],

        True,
        Echo[ "The \"ClassLabel\" option value " <> classLabel <> " is not Automatic, a variable index, or one of " <> ToString[varNames] <> ".", "ClConOutliersOperationsProcessing::"];
        Return[$ClConFailure]
      ];

      res = <| "data"->data, "varNames"->varNames,
        "trainingDataOnly" -> trainingDataOnly,
        "simpleConversion" -> simpleConversion,
        "classLabel"->classLabel, "classLabelInd"->classLabelInd,
        "outlierIdentifier"->outlierIdentifier |>;

      ClConUnit[res, context]
    ];

(*End[]  *`Private`*)

(*EndPackage[]*)
